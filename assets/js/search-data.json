{
  
    
        "post0": {
            "title": "Machine Learning & Linear Regression from Scratch",
            "content": "Why from Scratch? . A need for finer grain control, not knowing where to make the appropriate changes and a lack of understanding some fundamental concepts. The notion of fitting a model given a set of a data points is quite familiar but how to do it is not often clear. Often times, the function to call for fitting a lines hides away important details for the sake of convenience. What is concerning is that these well-written packages can impede understanding of the science and math that formulates how a machine learns; thus, the need to peer behind the veil. . Library Imports . import numpy as np # Matplotlib is going to be used for visualisations import matplotlib.pyplot as plt import pandas as pd . References . Math Terminology . Dive into Deep Learning: https://d2l.ai/chapter_optimization/gd.html Really good integration of Python ML frameworks + Math | . | https://becominghuman.ai/univariate-linear-regression-clearly-explained-with-example-4164e83ca2ee | https://brilliant.org/wiki/feature-vector/ | https://mathworld.wolfram.com/TensorRank.html | https://brilliant.org/wiki/feature-vector/ | https://medium.com/swlh/the-math-of-machine-learning-i-gradient-descent-with-univariate-linear-regression-2afbfb556131 | https://en.wikipedia.org/wiki/Stimulus_modality | . Code . https://d2l.ai/chapter_optimization/gd.html | Batch, Mini-Batch, Stoch. SGD: https://towardsdatascience.com/batch-mini-batch-and-stochastic-gradient-descent-for-linear-regression-9fe4eefa637c | https://d2l.ai/chapter_optimization/gd.html | https://www.mldawn.com/linear-regression-from-scratch-using-numpy/ | . A Model for Learning . A recreation of the model depicted in Deep Learning for Coders with Fastai and PyTorch demonstrating the flow of information (data) and how a model can be formed. . . Core Basic Concepts . Before diving into even regression, there is a need to do a bit of work exploring to establish terminology and tease apart the details for understanding of semantics in the space of data. . Data Representation . To bridge the gap of understanding, the independent variable $X$ can thought of as a feature $x_d mid d=1$ denoting a single dimension and axis - a collection of a single aspect observed with-respect-to (wrt) to $y$. $$X=[x_1] mid x_1=[x_1^1, x_1^2, ..., x_d^n]$$ . NOTE In Jeremy Howard&#39;s book Deep Learning for Coders with Fastai and PyTorch the notion of dimension is pointed out as a potential area of confusion. | . . Tensors . To stabilize such a notion of &quot;dimensions&quot; the notion of a tensor and its rank can be used. The rank $R$ of a tensor can be thought of as an independent value denoting the number of dimensions $N$ of the underlying space. . Thus, first we consider a rank-0 tensor (i.e., a scalar) which can be represented by $N^0=1$ number since scalars denote quantities with magnitude and no direction. In this case, there is no dimension to a scalar. . To further generalize this idea, we can think of a rank-1 tensor (i.e., a vector) in $N$-dimensional space can be represented as $N^1=N$ numbers. . rank object . 0 | scalar | . 1 | vector | . 2 | N x N | . &gt;= 3 | tensor | . . Summary . To recap, we explored terminology used in forming the notion of univariate problem represented by a rank-1 independent variable $X$ and its relation ($ mathbb{R} rightarrow mathbb{R}$) to a dependent variable $y$. . Linear Regression . In this exploration of linear regression we will be a exploring the univariate case where in which we will observe a single independent variable $X$ and a dependent variable $y$ with a goal to estimate a linear relationship. Recalling the diagram from earlier, this is the architecture aspect when considering the choice of a particular model. More specifically, architecture in this context is conceptualization of a mathematical function for modeling. . Where this fits in with the diagram of a system for learning -- for automating analysis . . Inputs . A stroll down memory lane of the classic slope-intercept form denoting univariate linear function . $$ y=mx+b rightarrow y=a_0 + a_1 x $$ $y$ is a dependent variable | $x$ is an independent variable | $a_0$ denotes the intercept | $a_1$ denotes the linear regressions coefficient ie slope | . Given this function, we have a general model for an infinitely long line -- a representation of a target where in which one can attempt to fit given various observations. This leverages a form of learning that is known to be inductive when considering the context of reasong. Just as important, there is also deductive reasoning which will not be explored in this notebook. . Taking on the assumption of inductive reasoning as a methodology -- a principle in which one can define a system for learning we can think of modeling as a collection of observations from an arbitrary unknown process to be visualized and represented in $ mathbb{R^2}$ space. . def generate_univar_data(n_samples, mu=0, sigma=0.1) -&gt; pd.DataFrame: # The number of training data N = n_samples # 200 random samples as our data x_1 = np.random.rand(N) # Define the line slope and the Gaussian noise parameters slope = 3 mu, sigma = mu,sigma # mean and standard deviation intercept = np.random.normal(mu, sigma, N) # Define the coordinates of the data points using the line equation and the added Gaussian noise y = slope*x_1 + intercept return pd.DataFrame({ &quot;x&quot;:x_1, &quot;y&quot;: y }) df = generate_univar_data(300, mu=8, sigma=0.5) df.head() df.plot(x=&quot;x&quot;, y=&quot;y&quot;, kind=&quot;scatter&quot;,grid=True) . . Loss Functions . Given these concepts of input, a function to model there is a need for a cost function. The reason for a cost function is to denote the notion of distance -- a sense of how far the current model&#39;s forecast is off from the target. It can also be thought of as error wrt the to problem&#39;s idealized solution. The role of a cost function helps guide the search for the best possible values for $a_0,a_1$. . There are many methods for defining representing cost / error. . Mean Squared Error (MSE) . Mean Squared Error will be used $$ text{MSE}= frac{1}{N} sum^{N}_{i=1}({ hat{y}_i - y_i})^2 $$ . $ hat{y_i}$ represents the notion of a prediction | $y_i$ represents an observation defining what is a assumed to be ground-truth | . Root Mean Squared Error (RMSE) . $$ text{RMSE}= sqrt{ frac{1}{N} sum^{N}_{i=1}({ hat{y}_i - y_i})^2} $$&quot;...error rate by the square root of MSE. RMSE is the most easily interpreted statistic, as it has the same units as the quantity plotted on the vertical axis or Y-axis. . directly interprettable wrt measurement units | generally a better fit than a correlation coefficient | . Source:- https://www.i2tutorials.com/differences-between-mse-and-rmse/#:~:text=The%20MSE%20has%20the%20units,vertical%20axis%20or%20Y%2Daxis. . def mse(y_pred,y_truth): return np.sum((y_pred - y_truth)**2) def rmse( y_hat, y_truth): return np.sqrt(mse(y_pred - y_truth) / len(x)) . . Evaluation Metric vs Loss Function . Loss Function: something the model will minimize via training, tightly coupled with the particualr model Ex. log likelihood, negative log likelihood with penalty term(s) for log regression | . | Evaluation Metric: is a definition of distance along the notion of &quot;how far are we away from the target?&quot; &quot;...a function that gives a distance between each pair of point elements of a set. A set with a metric is called a metric space.[1] A metric induces a topology on a set, but not all topologies can be generated by a metric. A topological space whose topology can be described by a metric is called metrizable.&quot; . | This is often usd when evluating the model on data not used in training such as out-of-fold data or test data | Furthermore, this is also often used in hyper parameter tuning (more on this later when exploring neural networks) | . | . Remarks . IDGI, it still sounds like the same thing... is this just more MLDS lingo...? or is eval metric definition of a quantifiable target definining representation of an aspect of an observed process that should be factored in when training and evaluating a model as it performs SGD according to some loss function.... . https://towardsdatascience.com/11-evaluation-metrics-data-scientists-should-be-familiar-with-lessons-from-a-high-rank-kagglers-8596f75e58a7 | Metric: https://en.wikipedia.org/wiki/Metric_(mathematics) | More on Metrics: https://machinelearningmastery.com/metrics-evaluate-machine-learning-algorithms-python/ | https://www.mldawn.com/linear-regression-from-scratch-using-numpy/ | https://towardsdatascience.com/linear-regression-using-python-b136c91bf0a2 | http://primo.ai/index.php?title=Objective_vs._Cost_vs._Loss_vs._Error_Function | . Gradient Descent . Computing the Gradient . A a great review can be at: https://www.khanacademy.org/math/multivariable-calculus/multivariable-derivatives/partial-derivatives/v/partial-derivatives-introduction . At the core of &quot;fitting&quot; or &quot;learning&quot;, adjustments are made to observe how the loss function changes wrt an input variable . $$ frac{dE}{dy_{hat}}=y_{hat}-y, text{ derivative of error wrt prediction}$$ $$ frac{dy_{hat}}{dZ}=1, text{ derivative of }y_{hat} text{ wrt } Z$$ $$ frac{dZ}{dw_1}=x_1, frac{Z}{dw_{0}}=x_0=1, text{ derivative of } Z text{ wrt } w_0 text{ and } w_1$$ $$ frac{dE}{dw_1}= frac{dE}{dy_{hat}} times frac{dy_{hat}}{dZ} times frac{dZ}{dw_1}, text{ computing the gradient of the error function using Chain Rule}$$ $$ frac{dE}{dw_1}=-(y-y_{hat}) times 1 times x_1 = -(y-y_{hat}) times x_1$$ $$ frac{dE}{dw_0}=-(y-y_{hat}) times 1 times x_0 = -(y-y_{hat})$$ . Sum of Square Error Linear Regression System Design . Diagram . Entire Code . This notebook utilizes code found from the source . https://www.mldawn.com/linear-regression-from-scratch-using-numpy/ | . Loss Function &amp; Analytical Gradient . import numpy as np import matplotlib.pyplot as plt def SSE(y, y_hat): &quot;&quot;&quot;Sum of Square Error Source: https://en.wikipedia.org/wiki/Residual_sum_of_squares Why do we include `0.5`? - https://datascience.stackexchange.com/questions/52157/why-do-we-have-to-divide-by-2-in-the-ml-squared-error-cost-function &quot;&quot;&quot; return 0.50*np.sum((y - y_hat)**2) def Linear(Z): return Z def dEdW_1 (y, y_hat,x_1): &quot;&quot;&quot;Gradient denoting the Slope&quot;&quot;&quot; return np.sum(-(y - y_hat) * x_1) def dEdW_0 (y, y_hat): &quot;&quot;&quot;Gradient of Bias Unit&quot;&quot;&quot; return np.sum(-(y - y_hat)) . Generate Synthetic Data . N = 200 slope = 3 mu, sigma = 0, 0.1 # mean and standard deviation intercept = np.random.normal(mu, sigma, N) x_1 = np.random.rand(N) y = slope*x_1 + intercept len(x_1.shape), len(y.shape) . Visualization Boilerplate . from IPython.display import display, clear_output %matplotlib inline plt.style.use(&quot;seaborn&quot;) # fig = plt.figure() fig.set_size_inches(9,12) ax = fig.add_subplot(211) ax1 = fig.add_subplot(212) area = np.pi * 10 . Perform Naive Gradient Descent . The following performs a naive gradient descent doing the following . 300 training epochs | batch size of 200 | a learning rate eta of 0.001 | . # batch size affect minization of loss or how well the line fits? i&#39;ve been told that a smaller # batch size results in slow training which in general is true; however, it is still the same # because a model evenutally becomes saturated or is at a point where there is enough information caputred # suhc that fine tuning is necesary. wrt to slr, that is not absolutely necessary...? # init starting regression line w_1 = np.random.uniform(-2, -3, 1) w_0 = np.random.uniform(0, 2, 1) x_0 = 1 y_hat = w_1 * x_1 + w_0 * x_0 # m*x + b epoch = 300 eta = 0.001 # this is learning rate E = [] Zs = [] preds = [] eps = [] for ep in range(epoch): Z = w_1 * x_1 + w_0 * x_0 # TODO: believe the &quot;batch_size&quot; in this case is 200...? y_hat = Linear(Z) error = SSE(y, y_hat) E.append(error) # NOTE: error is collected for visual pu preds.append(y_hat) Zs.append(Z) eps.append(ep) # compute the derivative of error wrt to x for an update dEdw_1 = dEdW_1(y, y_hat, x_1) dEdw_0 = dEdW_0(y, y_hat) # apply the update found from analytically computing the gradient? w_1 = w_1 - eta * dEdw_1 w_0 = w_0 - eta * dEdw_0 if ep % 1 == 0: ax.clear() ax1.clear() # plot linear model fitting and predictions ax.scatter( x_1, y, s=area, c=&quot;r&quot;, alpha=0.5 ) # these are kept constant in the viusal # TODO: add a_0, a_1 -- bias and slope ax.plot( x_1, y_hat, &quot;-b&quot;, label=&quot;SSE= %.2f&quot; % error + &quot; n&quot; + &quot;Epoch Number= %d&quot; % (ep), ) ax.set_xlabel(&quot;x (Our Data)&quot;) ax.set_ylabel(&quot;y_hat (Network Outputs)&quot;) ax.legend() ax.set_title(&quot;Linear Model Fitting&quot;) ax.set_ylim(-3, 5) ax.grid(True) ax1.scatter(eps, E, c=&quot;g&quot;, alpha=0.30) ax1.plot( x_1, y_hat, &quot;-b&quot;, label=&quot;SSE= %.2f&quot; % error + &quot; n&quot; + &quot;Epoch Number= %d&quot; % (ep), ) ax1.set_xlabel(&quot;epochs&quot;) ax1.set_ylabel(&quot;loss&quot;) ax1.set_title(&quot;Training Loss&quot;) ax1.set_xlim(0, 300) ax1.set_ylim(0, 700) ax1.legend() ax1.grid(True) clear_output(wait=True) display(fig) if ep == 299: ax1.plot(E, &quot;r&quot;) . Follow-Up Questions . How do we find the elbow of the loss curve plot? | It is known that we can gurantee convergence of loss by modulating the lr, what does that look like? | How does the information observed from residuals extend into neural networks? | . # least square method...? # there exists 2 methods.../ per josh MLE or Leaset Sqaured # MLE...? possibly/??? using 2 MLE..? # y _hat, y_pred y_new, y_(i+1) | i in N denoting # number of samples/ instances # is this grad descent, idk... # maybe...? multivariate.... .",
            "url": "https://henrylao.github.io/fastpages/2022/01/17/ml-and-linear-regression.html",
            "relUrl": "/2022/01/17/ml-and-linear-regression.html",
            "date": " • Jan 17, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://henrylao.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://henrylao.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://henrylao.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://henrylao.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}